{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kadal","text":"<p>Kadal is an intelligent location assistant that helps you explore the world through natural conversation. Simply ask Kadal to navigate to any location, and it will take you there on an interactive satellite map.</p>"},{"location":"#what-is-kadal","title":"What is Kadal?","text":"<p>Kadal combines the power of AI with satellite imagery to create an intuitive way to explore our planet. Whether you're looking for a specific city, landmark, or geographic feature, just ask Kadal in plain English and watch as it finds and navigates to your destination.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Natural Language Navigation: Ask questions like \"Go to Tokyo\" or \"Show me the Amazon rainforest\"</li> <li>Interactive Satellite Maps: Explore locations with high-resolution satellite imagery</li> <li>Intelligent Location Search: Kadal understands context and finds exactly what you're looking for</li> <li>Real-time Chat Interface: Get instant responses and location insights</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Sign In: Create an account to unlock the full Kadal experience</li> <li>Ask Away: Type your location query in natural language</li> <li>Explore: Navigate the interactive map to discover new places</li> <li>Learn: Get contextual information about locations and geographic features</li> </ol>"},{"location":"#example-queries","title":"Example Queries","text":"<p>Try asking Kadal:</p> <ul> <li>\"Take me to Paris\"</li> <li>\"Navigate to the Golden Gate Bridge\"</li> <li>\"Show me the Sahara Desert\"</li> <li>\"Go to Mount Everest\"</li> <li>\"Find New York City\"</li> </ul>"},{"location":"api/","title":"Tender Tales API Documentation","text":"<p>The Tender Tales API provides endpoints for location-based queries using LLM-powered analysis.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The API uses Anthropic's Claude API for query analysis. Configure the <code>ANTHROPIC_API_KEY</code> environment variable to enable intelligent query processing.</p>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#mcp-query","title":"MCP Query","text":"<p>Process location queries using LLM-powered analysis with MCP (Model Context Protocol) tools.</p> <pre><code>POST /mcp/query\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"query\": \"string\",\n  \"region\": {\n    \"north\": float,\n    \"south\": float,\n    \"east\": float,\n    \"west\": float\n  }\n}\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>query</code> string Yes The location query to process <code>region</code> object Yes Bounding box for the query region <code>region.north</code> float Yes Northern boundary (latitude) <code>region.south</code> float Yes Southern boundary (latitude) <code>region.east</code> float Yes Eastern boundary (longitude) <code>region.west</code> float Yes Western boundary (longitude) <p>Response:</p> <pre><code>{\n  \"status\": \"success\" | \"out_of_scope\" | \"service_unavailable\" | \"analysis_failed\",\n  \"response\": \"string\",\n  \"data\": [\n    {\n      \"tool\": \"string\",\n      \"result\": object,\n      \"reasoning\": \"string\"\n    }\n  ],\n  \"analysis\": {\n    \"reasoning\": \"string\",\n    \"tools_used\": [\"string\"]\n  },\n  \"original_query\": \"string\"\n}\n</code></pre> <p>Status Types:</p> <ul> <li><code>success</code>: Query processed successfully</li> <li><code>out_of_scope</code>: Query is outside the supported scope</li> <li><code>service_unavailable</code>: AI assistant unavailable (missing API key)</li> <li><code>analysis_failed</code>: LLM analysis failed</li> </ul> <p>Example:</p> <pre><code>curl -X POST \"http://localhost:8000/mcp/query\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"Find the coordinates of San Francisco\",\n    \"region\": {\n      \"north\": 37.8,\n      \"south\": 37.7,\n      \"east\": -122.3,\n      \"west\": -122.5\n    }\n  }'\n</code></pre>"},{"location":"api/#environment-configuration","title":"Environment Configuration","text":"<p>The API requires the following environment variables:</p> <ul> <li><code>ANTHROPIC_API_KEY</code>: Required for LLM query analysis</li> <li><code>GOOGLE_MAPS_API_KEY</code>: Optional, for enhanced geocoding capabilities</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API returns standard HTTP status codes:</p> <ul> <li><code>200</code>: Success</li> <li><code>500</code>: Internal server error</li> </ul> <p>All responses include a <code>status</code> field indicating the result of the operation.</p>"},{"location":"design/","title":"Kadal Agent Architecture Design","text":"<p>This document outlines the architecture and design of the Kadal intelligent agent system, which powers natural language location queries and will expand to support complex Earth Engine operations.</p>"},{"location":"design/#overview","title":"Overview","text":"<p>Kadal uses a sophisticated agent architecture that combines Large Language Models (LLMs) with geospatial tools to understand user intent and execute appropriate actions. The system is designed for extensibility, allowing for the addition of new Earth Engine capabilities over time.</p>"},{"location":"design/#current-architecture","title":"Current Architecture","text":""},{"location":"design/#system-components","title":"System Components","text":"<pre><code>graph TB\n    UI[Frontend UI] --&gt; API[FastAPI Backend]\n    API --&gt; LLM[LLM Query Processor]\n    LLM --&gt; Tools[Tool Registry]\n    Tools --&gt; GEO[Geocoding Service]\n    Tools --&gt; EE[Earth Engine Tools]\n\n    subgraph \"Current Implementation\"\n        GEO --&gt; GOOGLE[Google Maps API]\n    end\n\n    subgraph \"Planned Tools\"\n        EE --&gt; IMAGERY[Satellite Imagery]\n        EE --&gt; TERRAIN[Terrain Analysis]\n        EE --&gt; LANDCOVER[Land Cover Analysis]\n        EE --&gt; CHANGE[Change Detection]\n    end</code></pre>"},{"location":"design/#request-flow","title":"Request Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Frontend\n    participant API\n    participant LLM as LLM Service\n    participant Tools as Tool Registry\n    participant External as External APIs\n\n    User-&gt;&gt;Frontend: \"Go to Paris\"\n    Frontend-&gt;&gt;API: POST /mcp/query\n    API-&gt;&gt;LLM: analyze_query()\n    LLM-&gt;&gt;LLM: Parse intent &amp; extract location\n    LLM-&gt;&gt;API: QueryAnalysis (geocode_location)\n    API-&gt;&gt;Tools: call_mcp_server()\n    Tools-&gt;&gt;External: Google Maps Geocoding\n    External-&gt;&gt;Tools: Coordinates + metadata\n    Tools-&gt;&gt;API: Location result\n    API-&gt;&gt;Frontend: Formatted response\n    Frontend-&gt;&gt;Frontend: Navigate map to location</code></pre>"},{"location":"design/#core-components","title":"Core Components","text":""},{"location":"design/#1-llm-query-processor","title":"1. LLM Query Processor","text":"<p>Location: <code>tender_tales/services/llm_service.py</code></p> <p>The heart of the agent system, responsible for: - Analyzing user queries for intent and scope - Extracting location names and parameters - Determining appropriate tool calls - Generating response templates</p> <p>Key Features: - Uses Claude 3.5 Sonnet for robust language understanding - Structured output with Pydantic models - Comprehensive prompt engineering for location extraction - Graceful error handling and fallbacks</p> <pre><code>class LLMQueryProcessor:\n    def analyze_query(query: str, region: Dict) -&gt; QueryAnalysis:\n        # 1. Parse user intent\n        # 2. Extract location parameters\n        # 3. Determine tool calls\n        # 4. Generate response template\n</code></pre>"},{"location":"design/#2-tool-registry-system","title":"2. Tool Registry System","text":"<p>Location: <code>tender_tales/api/routes.py:150-171</code></p> <p>A flexible system for registering and executing geospatial tools:</p> <pre><code>tool_handlers = {\n    \"geocode_location\": _handle_geocode_location,\n    # Future tools will be added here\n}\n</code></pre>"},{"location":"design/#3-data-models","title":"3. Data Models","text":"<p>Core Models: - <code>ToolCall</code>: Represents a tool invocation with parameters - <code>QueryAnalysis</code>: Complete analysis result from LLM - <code>MCPQueryRequest</code>: Incoming user request structure</p>"},{"location":"design/#current-capabilities","title":"Current Capabilities","text":""},{"location":"design/#location-understanding","title":"Location Understanding","text":"<p>The current implementation excels at location-based queries:</p> <p>Supported Query Patterns: - \"Go to [location]\" - \"Navigate to [location]\" - \"Show me [location]\" - \"Take me to [location]\" - \"Find [location]\"</p> <p>Location Extraction Logic: <pre><code>\"Go to New York City\" \u2192 location_name = \"New York City\"\n\"Navigate to Amazon rainforest\" \u2192 location_name = \"Amazon rainforest\"\n\"Show me Tokyo\" \u2192 location_name = \"Tokyo\"\n</code></pre></p> <p>Geocoding Flow: 1. LLM extracts location name from natural language 2. Google Maps Geocoding API resolves to coordinates 3. Response includes formatted address, coordinates, and zoom level 4. Frontend navigates map to the location</p>"},{"location":"design/#architecture-benefits","title":"Architecture Benefits","text":""},{"location":"design/#1-modular-design","title":"1. Modular Design","text":"<ul> <li>Clean separation between LLM reasoning and tool execution</li> <li>Easy to add new Earth Engine capabilities</li> <li>Pluggable tool system</li> </ul>"},{"location":"design/#2-robust-error-handling","title":"2. Robust Error Handling","text":"<ul> <li>Graceful degradation when APIs are unavailable</li> <li>Comprehensive logging for debugging</li> <li>User-friendly error messages</li> </ul>"},{"location":"design/#3-scalable-foundation","title":"3. Scalable Foundation","text":"<ul> <li>Agent pattern ready for complex multi-step workflows</li> <li>Structured data models for consistent interfaces</li> <li>Extensible prompt system for new capabilities</li> </ul>"},{"location":"design/#roadmap-general-earth-engine-agent","title":"Roadmap: General Earth Engine Agent","text":""},{"location":"design/#phase-1-enhanced-location-intelligence-current","title":"Phase 1: Enhanced Location Intelligence (Current)","text":"<ul> <li>\u2705 Natural language location queries</li> <li>\u2705 Geocoding with Google Maps integration</li> <li>\u2705 Interactive map navigation</li> </ul>"},{"location":"design/#phase-2-satellite-imagery-analysis","title":"Phase 2: Satellite Imagery Analysis","text":"<pre><code>graph LR\n    Query[User Query] --&gt; LLM[LLM Analysis]\n    LLM --&gt; IMG[get_satellite_imagery]\n    IMG --&gt; EE[Earth Engine API]\n    EE --&gt; SAT[Satellite Data]\n    SAT --&gt; VIZ[Visualization]</code></pre> <p>Planned Tools: - <code>get_satellite_imagery</code>: Fetch satellite imagery for regions - <code>analyze_land_cover</code>: Classify land use types - <code>detect_changes</code>: Compare imagery across time periods</p>"},{"location":"design/#phase-3-complex-geospatial-analysis","title":"Phase 3: Complex Geospatial Analysis","text":"<p>Advanced Capabilities: - Multi-dataset analysis workflows - Time series analysis - Environmental monitoring - Custom visualizations</p> <p>Example Future Query Flow: <pre><code>User: \"Show me deforestation in the Amazon from 2020 to 2024\"\n\u2193\nLLM: Analyze \u2192 [\"geocode_location\": \"Amazon\", \"get_forest_cover\": {...}, \"detect_changes\": {...}]\n\u2193\nTools: Execute geocoding \u2192 imagery retrieval \u2192 change detection\n\u2193\nResponse: Interactive visualization with deforestation metrics\n</code></pre></p>"},{"location":"design/#phase-4-intelligent-workflows","title":"Phase 4: Intelligent Workflows","text":"<ul> <li>Multi-step analysis chains</li> <li>Data export capabilities</li> <li>Custom reporting</li> <li>Integration with external datasets</li> </ul>"},{"location":"design/#technical-considerations","title":"Technical Considerations","text":""},{"location":"design/#llm-integration","title":"LLM Integration","text":"<ul> <li>Model: Claude 3.5 Sonnet (high reasoning capability)</li> <li>Temperature: 0.1 (consistent, focused responses)</li> <li>Structured Output: JSON schema validation</li> <li>Prompt Engineering: Comprehensive system prompts with examples</li> </ul>"},{"location":"design/#tool-architecture","title":"Tool Architecture","text":"<ul> <li>Registry Pattern: Dynamic tool discovery and execution</li> <li>Async Support: Non-blocking tool execution</li> <li>Parameter Validation: Type-safe tool parameters</li> <li>Error Isolation: Failed tools don't crash entire system</li> </ul>"},{"location":"design/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Tool Composition: Chain multiple tools for complex analysis</li> <li>Caching: Optimize repeated Earth Engine queries</li> <li>Streaming: Real-time updates for long-running analysis</li> <li>Batch Processing: Handle multiple locations/time periods</li> </ul>"},{"location":"design/#security-performance","title":"Security &amp; Performance","text":""},{"location":"design/#current-safeguards","title":"Current Safeguards","text":"<ul> <li>Input validation on all user queries</li> <li>API key management through environment variables</li> <li>Rate limiting through external API quotas</li> <li>Comprehensive logging for audit trails</li> </ul>"},{"location":"design/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Request rate limiting</li> <li>Result caching for common queries</li> <li>Query optimization for Earth Engine</li> <li>User authentication and usage tracking</li> </ul>"},{"location":"design/#conclusion","title":"Conclusion","text":"<p>The Kadal agent architecture provides a robust foundation for intelligent geospatial analysis. The current location understanding capabilities demonstrate the system's potential, while the modular design ensures smooth expansion to complex Earth Engine operations.</p> <p>The combination of advanced language understanding, structured tool execution, and extensible architecture positions Kadal to become a comprehensive geospatial intelligence platform.</p>"}]}