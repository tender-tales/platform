{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tender Tales Platform","text":"<p>A full-stack platform for satellite data analysis and similarity mapping using Google Earth Engine.</p>"},{"location":"#architecture","title":"Architecture","text":"<ul> <li>Frontend (<code>ui/</code>): Next.js application with TypeScript and Tailwind CSS</li> <li>Backend (<code>tender_tales/</code>): Python FastAPI backend with Google Earth Engine integration</li> <li>Docker: Containerized with development and production configurations</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#development","title":"Development","text":"<ol> <li> <p>Set up environment: <pre><code>cp .env.development .env\n# Edit .env with your Google Earth Engine credentials\n</code></pre></p> </li> <li> <p>Run with Docker Compose: <pre><code>docker compose --env-file .env.development -f docker-compose.dev.yml up backend-dev\n# In another terminal for frontend:\ndocker compose --env-file .env.development -f docker-compose.dev.yml --profile frontend up frontend-dev\n</code></pre></p> </li> </ol>"},{"location":"#environment-variables","title":"Environment Variables","text":""},{"location":"#required","title":"Required","text":"<ul> <li><code>EARTH_ENGINE_PROJECT_ID</code> - Your Google Earth Engine project ID</li> <li><code>GOOGLE_APPLICATION_CREDENTIALS</code> - Path to your service account key file</li> </ul>"},{"location":"#optional","title":"Optional","text":"<ul> <li><code>FRONTEND_PORT</code> - Frontend port (default: 3000)</li> <li><code>BACKEND_PORT</code> - Backend port (default: 8000)</li> <li><code>DEBUG</code> - Enable debug mode (default: false)</li> </ul>"},{"location":"#google-earth-engine-setup","title":"Google Earth Engine Setup","text":"<ol> <li>Create a Google Cloud Project</li> <li>Enable the Earth Engine API</li> <li>Create a service account and download the key file</li> <li>Set the <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable to point to the key file</li> <li>Set the <code>EARTH_ENGINE_PROJECT_ID</code> environment variable</li> </ol>"},{"location":"#development-commands","title":"Development Commands","text":""},{"location":"#frontend-ui","title":"Frontend (ui/)","text":"<pre><code>cd ui/\nnpm install\nnpm run dev\nnpm run build\nnpm run lint\n</code></pre>"},{"location":"#backend-tender_tales","title":"Backend (tender_tales/)","text":"<pre><code>cd tender_tales/\nuv sync --dev\nuv run uvicorn api.main:app --reload\nuv run pytest\n</code></pre>"},{"location":"api/","title":"Tender Tales API Documentation","text":"<p>The Tender Tales API provides endpoints for satellite data analysis and similarity mapping using Google Earth Engine.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The API requires Google Earth Engine credentials to be configured. See the Earth Engine Setup Guide for configuration details.</p>"},{"location":"api/#common-response-format","title":"Common Response Format","text":"<p>All API responses follow a consistent format:</p> <pre><code>{\n  \"success\": boolean,\n  \"message\": string,\n  \"data\": object | array,\n  ...additional_fields\n}\n</code></pre>"},{"location":"api/#error-responses","title":"Error Responses","text":"<pre><code>{\n  \"success\": false,\n  \"error\": string,\n  \"message\": string,\n  \"error_type\": string\n}\n</code></pre>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#health-check","title":"Health Check","text":"<p>Check the API service status and Earth Engine connectivity.</p> <pre><code>GET /health\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"healthy\" | \"degraded\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"services\": {\n    \"earth_engine\": {\n      \"configured\": boolean,\n      \"initialized\": boolean,\n      \"project_id\": string\n    }\n  },\n  \"environment\": {\n    \"debug\": boolean,\n    \"backend_port\": number,\n    \"frontend_port\": number\n  }\n}\n</code></pre>"},{"location":"api/#root","title":"Root","text":"<p>Basic API information.</p> <pre><code>GET /\n</code></pre> <p>Response:</p> <pre><code>{\n  \"message\": \"Tender Tales API\",\n  \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"api/#similarity-heatmap","title":"Similarity Heatmap","text":"<p>Generate similarity heatmaps between two years for change detection analysis.</p>"},{"location":"api/#get-request","title":"GET Request","text":"<pre><code>GET /api/similarity-heatmap?north={north}&amp;south={south}&amp;east={east}&amp;west={west}&amp;reference_year={year}&amp;target_year={year}\n</code></pre> <p>Query Parameters:</p> Parameter Type Required Default Description <code>north</code> float Yes - Northern boundary (latitude) <code>south</code> float Yes - Southern boundary (latitude) <code>east</code> float Yes - Eastern boundary (longitude) <code>west</code> float Yes - Western boundary (longitude) <code>reference_year</code> integer No 2022 Reference year for comparison <code>target_year</code> integer No 2023 Target year for comparison <p>Example:</p> <pre><code>curl \"http://localhost:8000/api/similarity-heatmap?north=37.0&amp;south=36.0&amp;east=-120.5&amp;west=-121.5&amp;reference_year=2022&amp;target_year=2023\"\n</code></pre>"},{"location":"api/#post-request","title":"POST Request","text":"<pre><code>POST /api/similarity-heatmap\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"bounds\": {\n    \"north\": 37.0,\n    \"south\": 36.0,\n    \"east\": -120.5,\n    \"west\": -121.5\n  },\n  \"reference_year\": 2022,\n  \"target_year\": 2023\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"mode\": \"similarity_heatmap\",\n  \"data\": {\n    \"grid\": [[float]],\n    \"bounds\": {\n      \"north\": float,\n      \"south\": float,\n      \"east\": float,\n      \"west\": float\n    },\n    \"resolution\": {\n      \"lat\": float,\n      \"lon\": float\n    }\n  },\n  \"reference_year\": integer,\n  \"target_year\": integer,\n  \"message\": \"Similarity heatmap computed between {reference_year} and {target_year}\"\n}\n</code></pre>"},{"location":"api/#satellite-embeddings","title":"Satellite Embeddings","text":"<p>Extract satellite embedding vectors for analysis and visualization.</p>"},{"location":"api/#get-request_1","title":"GET Request","text":"<pre><code>GET /api/embeddings?north={north}&amp;south={south}&amp;east={east}&amp;west={west}&amp;year={year}&amp;num_points={points}\n</code></pre> <p>Query Parameters:</p> Parameter Type Required Default Description <code>north</code> float Yes - Northern boundary (latitude) <code>south</code> float Yes - Southern boundary (latitude) <code>east</code> float Yes - Eastern boundary (longitude) <code>west</code> float Yes - Western boundary (longitude) <code>year</code> integer No 2023 Year for embeddings <code>num_points</code> integer No 50 Number of sample points (1-1000) <p>Example:</p> <pre><code>curl \"http://localhost:8000/api/embeddings?north=37.0&amp;south=36.0&amp;east=-120.5&amp;west=-121.5&amp;year=2023&amp;num_points=100\"\n</code></pre>"},{"location":"api/#post-request_1","title":"POST Request","text":"<pre><code>POST /api/embeddings\nContent-Type: application/json\n</code></pre> <p>Request Body:</p> <pre><code>{\n  \"bounds\": {\n    \"north\": 37.0,\n    \"south\": 36.0,\n    \"east\": -120.5,\n    \"west\": -121.5\n  },\n  \"year\": 2023,\n  \"num_points\": 100\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"mode\": \"embeddings\",\n  \"data\": [\n    {\n      \"longitude\": float,\n      \"latitude\": float,\n      \"embedding\": [float],\n      \"similarity\": float,\n      \"land_use\": string\n    }\n  ],\n  \"bounds\": {\n    \"north\": float,\n    \"south\": float,\n    \"east\": float,\n    \"west\": float\n  },\n  \"year\": integer,\n  \"count\": integer,\n  \"message\": \"Retrieved {count} embedding points for year {year}\"\n}\n</code></pre>"},{"location":"api/#demo-locations","title":"Demo Locations","text":"<p>Get predefined locations for testing and demonstration purposes.</p> <pre><code>GET /api/demo-locations\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"name\": \"Amazon Rainforest\",\n      \"longitude\": -60.0,\n      \"latitude\": -3.0,\n      \"bounds\": {\n        \"north\": -2.0,\n        \"south\": -4.0,\n        \"east\": -59.0,\n        \"west\": -61.0\n      },\n      \"description\": \"Deforestation monitoring in the Amazon Basin\"\n    }\n  ],\n  \"count\": integer,\n  \"message\": \"Retrieved demo locations for similarity analysis\"\n}\n</code></pre>"},{"location":"api/#analysis-types","title":"Analysis Types","text":"<p>Get information about supported analysis types and their parameters.</p> <pre><code>GET /api/analysis-types\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"type\": \"similarity_heatmap\",\n      \"name\": \"Similarity Heatmap\",\n      \"description\": \"Compare satellite embeddings between two years to identify changes\",\n      \"parameters\": [\"bounds\", \"reference_year\", \"target_year\"]\n    }\n  ],\n  \"count\": integer,\n  \"message\": \"Retrieved supported analysis types\"\n}\n</code></pre>"},{"location":"api/#data-models","title":"Data Models","text":""},{"location":"api/#boundingbox","title":"BoundingBox","text":"<pre><code>{\n  \"north\": float,    // Northern latitude boundary\n  \"south\": float,    // Southern latitude boundary\n  \"east\": float,     // Eastern longitude boundary\n  \"west\": float      // Western longitude boundary\n}\n</code></pre>"},{"location":"api/#embedding-point","title":"Embedding Point","text":"<pre><code>{\n  \"longitude\": float,        // Point longitude\n  \"latitude\": float,         // Point latitude\n  \"embedding\": [float],      // 768-dimensional embedding vector\n  \"similarity\": float,       // Similarity score (0-1)\n  \"land_use\": string        // Classified land use type\n}\n</code></pre>"},{"location":"api/#error-codes","title":"Error Codes","text":"Code Error Type Description 400 VALIDATION_ERROR Invalid request parameters 503 AUTHENTICATION_ERROR Earth Engine not configured 500 SERVER_ERROR Internal server error"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API does not currently implement rate limiting, but requests may be limited by Google Earth Engine quotas and processing time.</p>"},{"location":"api/#examples","title":"Examples","text":""},{"location":"api/#basic-similarity-analysis","title":"Basic Similarity Analysis","text":"<pre><code># Get similarity heatmap for California Central Valley\ncurl -X GET \"http://localhost:8000/api/similarity-heatmap\" \\\n  -G \\\n  -d \"north=37.0\" \\\n  -d \"south=36.0\" \\\n  -d \"east=-120.5\" \\\n  -d \"west=-121.5\" \\\n  -d \"reference_year=2022\" \\\n  -d \"target_year=2023\"\n</code></pre>"},{"location":"api/#extract-embeddings","title":"Extract Embeddings","text":"<pre><code># Get 200 embedding points for Dubai area\ncurl -X GET \"http://localhost:8000/api/embeddings\" \\\n  -G \\\n  -d \"north=25.5\" \\\n  -d \"south=24.9\" \\\n  -d \"east=55.6\" \\\n  -d \"west=54.9\" \\\n  -d \"year=2023\" \\\n  -d \"num_points=200\"\n</code></pre>"},{"location":"api/#using-post-with-complex-data","title":"Using POST with Complex Data","text":"<pre><code>curl -X POST \"http://localhost:8000/api/similarity-heatmap\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"bounds\": {\n      \"north\": -2.0,\n      \"south\": -4.0,\n      \"east\": -59.0,\n      \"west\": -61.0\n    },\n    \"reference_year\": 2020,\n    \"target_year\": 2023\n  }'\n</code></pre>"},{"location":"earth-engine-setup/","title":"Google Earth Engine Setup and Authentication","text":"<p>This guide explains how to set up Google Earth Engine authentication for accessing the satellite embedding dataset and configuring GitHub Actions deployment.</p>"},{"location":"earth-engine-setup/#overview","title":"Overview","text":"<p>The application uses Google Earth Engine service account authentication, which is the recommended approach for server-side applications. This eliminates the need for manual <code>earthengine authenticate</code> commands and works in automated CI/CD environments.</p>"},{"location":"earth-engine-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Google Cloud Project: Project ID <code>ocean-health-468302</code></li> <li>Earth Engine Access: Register at Google Earth Engine</li> <li>Service Account: Create a service account for server-side authentication</li> </ol>"},{"location":"earth-engine-setup/#initial-setup","title":"Initial Setup","text":""},{"location":"earth-engine-setup/#step-1-enable-earth-engine-api","title":"Step 1: Enable Earth Engine API","text":"<ol> <li>Go to Google Cloud Console</li> <li>Select project <code>ocean-health-468302</code></li> <li>Navigate to \"APIs &amp; Services\" &gt; \"Library\"</li> <li>Search for \"Google Earth Engine API\" and enable it</li> </ol>"},{"location":"earth-engine-setup/#step-2-create-service-account","title":"Step 2: Create Service Account","text":"<ol> <li>In Google Cloud Console, go to \"IAM &amp; Admin\" &gt; \"Service Accounts\"</li> <li>Click \"Create Service Account\"</li> <li>Name: <code>earth-engine-service</code></li> <li>Description: <code>Service account for Earth Engine API access</code></li> <li>Click \"Create and Continue\"</li> </ol>"},{"location":"earth-engine-setup/#step-3-assign-permissions","title":"Step 3: Assign Permissions","text":"<p>Assign these roles to the service account: - <code>Earth Engine Resource Admin</code> - <code>Earth Engine Resource Viewer</code></p>"},{"location":"earth-engine-setup/#step-4-generate-private-key","title":"Step 4: Generate Private Key","text":"<ol> <li>Click on the created service account</li> <li>Go to \"Keys\" tab</li> <li>Click \"Add Key\" &gt; \"Create New Key\"</li> <li>Choose \"JSON\" format</li> <li>Download the private key file</li> </ol>"},{"location":"earth-engine-setup/#step-5-register-service-account-with-earth-engine","title":"Step 5: Register Service Account with Earth Engine","text":"<p>You can register the service account in two ways:</p>"},{"location":"earth-engine-setup/#method-1-using-earth-engine-cli","title":"Method 1: Using Earth Engine CLI","text":"<pre><code>earthengine authenticate --service-account your-service-account@ocean-health-468302.iam.gserviceaccount.com --key-file path/to/your/private-key.json\n</code></pre>"},{"location":"earth-engine-setup/#method-2-using-earth-engine-code-editor","title":"Method 2: Using Earth Engine Code Editor","text":"<ul> <li>Go to https://code.earthengine.google.com/</li> <li>Click on \"Assets\" tab</li> <li>In the console, run:   <pre><code>// Replace with your service account email\nee.data.setAuthToken(null, 'your-service-account@project.iam.gserviceaccount.com');\n</code></pre></li> </ul>"},{"location":"earth-engine-setup/#method-3-using-python-api","title":"Method 3: Using Python API","text":"<pre><code>import ee\nee.Authenticate()  # Follow the prompts to register the service account\n</code></pre>"},{"location":"earth-engine-setup/#github-actions-configuration","title":"GitHub Actions Configuration","text":""},{"location":"earth-engine-setup/#required-github-secrets","title":"Required GitHub Secrets","text":"<p>Configure the following secrets in your GitHub repository:</p>"},{"location":"earth-engine-setup/#1-earth_engine_service_account_key","title":"1. <code>EARTH_ENGINE_SERVICE_ACCOUNT_KEY</code>","text":"<p>This should contain the complete JSON service account key file content.</p>"},{"location":"earth-engine-setup/#2-earth_engine_project_id","title":"2. <code>EARTH_ENGINE_PROJECT_ID</code>","text":"<p>Your Google Cloud project ID that has Earth Engine enabled (<code>ocean-health-468302</code>).</p>"},{"location":"earth-engine-setup/#3-gcp_sa_key-already-configured","title":"3. <code>GCP_SA_KEY</code> (already configured)","text":"<p>Your existing Google Cloud service account key for deployment.</p>"},{"location":"earth-engine-setup/#4-gcp_project_id-already-configured","title":"4. <code>GCP_PROJECT_ID</code> (already configured)","text":"<p>Your Google Cloud project ID.</p>"},{"location":"earth-engine-setup/#how-to-add-secrets","title":"How to Add Secrets","text":"<ol> <li>Copy the entire content of the downloaded JSON file</li> <li>Go to your GitHub repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Create a new secret named <code>EARTH_ENGINE_SERVICE_ACCOUNT_KEY</code></li> <li>Paste the complete JSON content</li> </ol>"},{"location":"earth-engine-setup/#local-development-setup","title":"Local Development Setup","text":""},{"location":"earth-engine-setup/#environment-variables","title":"Environment Variables","text":"<p>Add these to your <code>.env.local</code>:</p> <pre><code>GOOGLE_CLOUD_PROJECT=ocean-health-468302\nEARTH_ENGINE_SERVICE_ACCOUNT_EMAIL=your-service-account@ocean-health-468302.iam.gserviceaccount.com\nEARTH_ENGINE_PRIVATE_KEY_FILE=path/to/your/private-key.json\n</code></pre>"},{"location":"earth-engine-setup/#authentication-options","title":"Authentication Options","text":""},{"location":"earth-engine-setup/#option-1-use-the-same-service-account-key","title":"Option 1: Use the same service account key","text":"<pre><code># Copy the service account key to the expected location\ncp /path/to/your-service-account-key.json tender_tales/credentials.json\n</code></pre>"},{"location":"earth-engine-setup/#option-2-use-oauth-authentication-traditional-method","title":"Option 2: Use OAuth authentication (traditional method)","text":"<pre><code>earthengine authenticate\n</code></pre>"},{"location":"earth-engine-setup/#authentication-flow","title":"Authentication Flow","text":"<p>The updated Earth Engine service now:</p> <ol> <li>Checks multiple credential locations:</li> <li><code>/app/credentials.json</code> (for Cloud Run deployment)</li> <li><code>/run/secrets/earthengine-credentials</code> (for Docker Compose)</li> <li> <p><code>~/.config/earthengine/credentials</code> (for local development)</p> </li> <li> <p>Supports multiple authentication methods:</p> </li> <li>Service account credentials (recommended for production)</li> <li>OAuth credentials (for local development)</li> <li> <p>Application Default Credentials (fallback)</p> </li> <li> <p>Provides detailed logging:</p> </li> <li>Shows which authentication method is being used</li> <li>Logs service account email being used</li> <li>Tests the connection after initialization</li> </ol>"},{"location":"earth-engine-setup/#dataset-access","title":"Dataset Access","text":""},{"location":"earth-engine-setup/#dataset-information","title":"Dataset Information","text":"<ul> <li>Collection ID: <code>GOOGLE/SATELLITE_EMBEDDING/V1/ANNUAL</code></li> <li>Temporal Coverage: 2017-2024 (annual)</li> <li>Spatial Resolution: 10 meters</li> <li>Bands: 64 embedding dimensions (A00-A63)</li> <li>Data Type: Float32 (-1 to 1 range)</li> <li>Global Coverage: Land surfaces and shallow water</li> </ul>"},{"location":"earth-engine-setup/#testing-dataset-access","title":"Testing Dataset Access","text":"<p>Once authenticated, you can test access to the satellite embedding dataset:</p> <pre><code>const dataset = ee.ImageCollection('GOOGLE/SATELLITE_EMBEDDING/V1/ANNUAL');\nconst image = dataset\n  .filterDate('2023-01-01', '2023-12-31')\n  .first();\n\n// Get embedding vectors for a specific location\nconst point = ee.Geometry.Point([-122.4194, 37.7749]);\nconst sample = image.sampleRegions({\n  collection: ee.FeatureCollection([ee.Feature(point)]),\n  scale: 10,\n  projection: 'EPSG:4326'\n});\n</code></pre>"},{"location":"earth-engine-setup/#api-integration","title":"API Integration","text":"<p>Update your API route with proper authentication:</p> <pre><code>const serviceAccount = {\n  type: \"service_account\",\n  project_id: process.env.GOOGLE_CLOUD_PROJECT,\n  private_key_id: \"...\",\n  private_key: process.env.EARTH_ENGINE_PRIVATE_KEY,\n  client_email: process.env.EARTH_ENGINE_SERVICE_ACCOUNT_EMAIL,\n  client_id: \"...\",\n  auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\n  token_uri: \"https://oauth2.googleapis.com/token\"\n};\n\nawait ee.data.authenticateViaPrivateKey(serviceAccount);\n</code></pre>"},{"location":"earth-engine-setup/#deployment-pipeline","title":"Deployment Pipeline","text":""},{"location":"earth-engine-setup/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The GitHub Actions workflow now:</p> <ol> <li>During build: Uses the service account credentials to verify authentication works</li> <li>During deployment: Uses the same service account credentials in Cloud Run</li> <li>During runtime: The application will authenticate using the mounted credentials</li> </ol>"},{"location":"earth-engine-setup/#docker-compose-compatibility","title":"Docker Compose Compatibility","text":"<p>The setup maintains Docker Compose compatibility: - Still supports mounting credentials as Docker secrets - Works with existing <code>/run/secrets/earthengine-credentials</code> location</p>"},{"location":"earth-engine-setup/#changes-made-to-codebase","title":"Changes Made to Codebase","text":"<ol> <li>Updated <code>services/earth_engine.py</code>:</li> <li>Improved service account authentication using <code>ee.ServiceAccountCredentials()</code></li> <li>Added support for multiple credential file locations</li> <li> <p>Enhanced error handling and logging</p> </li> <li> <p>Updated <code>.github/workflows/deploy-gcp.yml</code>:</p> </li> <li>Changed to use <code>EARTH_ENGINE_SERVICE_ACCOUNT_KEY</code> secret</li> <li> <p>Uses the same secret for both build and deployment phases</p> </li> <li> <p>Maintained Docker Compose compatibility:</p> </li> <li>Still supports mounting credentials as Docker secrets</li> <li>Works with existing <code>/run/secrets/earthengine-credentials</code> location</li> </ol>"},{"location":"earth-engine-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"earth-engine-setup/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Errors: Ensure service account has Earth Engine access and is properly registered</li> <li>Permission Denied: Check IAM roles and Earth Engine registration</li> <li>Quota Exceeded: Monitor Earth Engine usage limits</li> <li>Invalid Project: Verify project ID <code>ocean-health-468302</code> is correct</li> <li>Service account not registered: Make sure to complete Step 5 above</li> </ol>"},{"location":"earth-engine-setup/#verification-steps","title":"Verification Steps","text":"<p>If you encounter issues:</p> <ol> <li>Verify the service account is registered with Earth Engine</li> <li>Check that the JSON key format is correct</li> <li>Ensure the project ID matches your Earth Engine project</li> <li>Verify the service account has appropriate permissions</li> </ol>"},{"location":"earth-engine-setup/#testing-the-setup","title":"Testing the Setup","text":"<p>The GitHub Actions workflow includes authentication verification during the build process. Check the workflow logs to ensure Earth Engine authentication is working correctly.</p>"},{"location":"earth-engine-setup/#current-status","title":"Current Status","text":"<p>The application has been updated to use service account authentication and should work seamlessly in both local development and production environments. The mock data approach has been replaced with real Earth Engine satellite embedding data access.</p>"}]}