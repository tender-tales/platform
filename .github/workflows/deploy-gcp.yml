name: build and deploy website to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: tender-tales
  SERVICE: tender-tales-website
  REGION: us-central1
  BUILD_ID: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Build website
        run: |
          cd ui
          npm run build
        env:
          NEXT_PUBLIC_SITE_URL: https://tendertales.ca

      - name: Generate and validate sitemap
        run: |
          cd ui
          npm run generate-sitemap

          # Validate sitemap XML
          if [ -f "public/sitemap.xml" ]; then
            echo "‚úÖ Sitemap generated successfully"
            xmllint --noout public/sitemap.xml && echo "‚úÖ Sitemap XML is valid"

            # Count URLs
            URL_COUNT=$(grep -c "<url>" public/sitemap.xml || echo "0")
            echo "üìä Sitemap contains $URL_COUNT URLs"
          else
            echo "‚ùå Sitemap generation failed"
            exit 1
          fi
        env:
          NEXT_PUBLIC_SITE_URL: https://tendertales.ca

      - name: Build Docker image
        run: |
          export BUILD_ID=${{ env.BUILD_ID }}
          export WEB3FORMS_ACCESS_KEY=${{ secrets.WEB3FORMS_ACCESS_KEY }}
          export NEXT_PUBLIC_SITE_URL=https://tendertales.ca
          docker compose build website

      - name: Test Docker image
        run: |
          # Test that the container can start successfully
          docker run -d --name website-test-${{ env.BUILD_ID }} \
            -p 3000:3000 \
            tender-tales/website:${{ env.BUILD_ID }}

          # Wait for startup
          sleep 10

          # Check if container is running
          if docker ps | grep website-test-${{ env.BUILD_ID }}; then
            echo "‚úì Website container started successfully"
          else
            echo "‚úó Website container failed to start"
            docker logs website-test-${{ env.BUILD_ID }}
            exit 1
          fi

          # Clean up
          docker stop website-test-${{ env.BUILD_ID }} || true
          docker rm website-test-${{ env.BUILD_ID }} || true

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Google Auth
        uses: 'google-github-actions/auth@v3'
        with:
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: 'earth-engine-service@ocean-health-468302.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v3'

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Build and push website image
        run: |
          # Set environment variables for docker-compose
          export BUILD_ID=${{ env.BUILD_ID }}
          export WEB3FORMS_ACCESS_KEY=${{ secrets.WEB3FORMS_ACCESS_KEY }}
          export NEXT_PUBLIC_SITE_URL=https://tendertales.ca

          # Build website image using docker-compose
          docker compose build website

          # Tag and push website
          docker tag tender-tales/website:${{ env.BUILD_ID }} \
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}

      - name: Deploy Website to Cloud Run
        id: deploy-website
        uses: google-github-actions/deploy-cloudrun@v3
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: '--allow-unauthenticated --memory=512Mi --cpu=1 --timeout=300 --max-instances=10 --port=3000'
          env_vars: |
            WEB3FORMS_ACCESS_KEY=${{ secrets.WEB3FORMS_ACCESS_KEY }}
            NEXT_PUBLIC_SITE_URL=https://tendertales.ca

      - name: Show deployment URL
        run: |
          echo "Website URL: ${{ steps.deploy-website.outputs.url }}"
