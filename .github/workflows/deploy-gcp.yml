name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: tender-tales
  SERVICE_BACKEND: tender-tales-backend
  SERVICE_FRONTEND: tender-tales-frontend
  REGION: us-central1
  BUILD_ID: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Earth Engine Credentials (for build)
        run: echo '{}' > tender_tales/credentials.json

      - name: Set up environment variables
        run: |
          cat > .env.production << EOF
          BACKEND_PORT=8000
          FRONTEND_PORT=3000
          BACKEND_HOST=localhost
          EARTH_ENGINE_PROJECT_ID=test-project
          DEBUG=false
          EOF

      - name: Build images with Docker Compose
        run: |
          export COMPOSE_PROJECT_NAME=tender-tales-ci
          export BACKEND_PORT=8000
          export FRONTEND_PORT=3000
          export BACKEND_HOST=localhost
          export EARTH_ENGINE_PROJECT_ID=${{ secrets.EARTH_ENGINE_PROJECT_ID }}
          export DEBUG=false
          export BUILD_ID=${{ github.sha }}
          docker compose build backend frontend

      - name: Test image functionality
        run: |
          # Quick smoke test - start containers and check they're healthy
          export COMPOSE_PROJECT_NAME=tender-tales-ci
          export BACKEND_PORT=8000
          export FRONTEND_PORT=3000
          export BACKEND_HOST=localhost
          export EARTH_ENGINE_PROJECT_ID=${{ secrets.EARTH_ENGINE_PROJECT_ID }}
          export DEBUG=false
          export BUILD_ID=${{ github.sha }}
          docker compose up -d backend
          sleep 30
          docker compose ps
          docker compose logs backend
          docker compose down

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Create Earth Engine Credentials
        run: echo '${{ secrets.EARTH_ENGINE_CREDENTIALS }}' > tender_tales/credentials.json

      - name: Set up environment variables
        run: |
          cat > .env.production << EOF
          BACKEND_PORT=8000
          FRONTEND_PORT=3000
          BACKEND_HOST=localhost
          EARTH_ENGINE_PROJECT_ID=${{ secrets.EARTH_ENGINE_PROJECT_ID }}
          DEBUG=false
          EOF

      - name: Build and tag images with Docker Compose
        run: |
          export COMPOSE_PROJECT_NAME=tender-tales-gcp
          export BACKEND_PORT=8000
          export FRONTEND_PORT=3000
          export BACKEND_HOST=localhost
          export EARTH_ENGINE_PROJECT_ID=${{ secrets.EARTH_ENGINE_PROJECT_ID }}
          export DEBUG=false
          export BUILD_ID=${{ github.sha }}
          docker compose build backend frontend

          # Tag for GAR
          docker tag tender-tales/platform:backend-${{ env.BUILD_ID }} \
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_BACKEND }}:${{ github.sha }}
          docker tag tender-tales/platform:frontend-${{ env.BUILD_ID }} \
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_FRONTEND }}:${{ github.sha }}

      - name: Push images to GAR
        run: |
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_BACKEND }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_FRONTEND }}:${{ github.sha }}

      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_BACKEND }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_BACKEND }}:${{ github.sha }}
          flags: '--allow-unauthenticated --memory=1Gi --cpu=1'
          env_vars: |
            EARTH_ENGINE_PROJECT_ID=${{ secrets.EARTH_ENGINE_PROJECT_ID }}
            GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
            BACKEND_PORT=8000

      - name: Deploy Frontend to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_FRONTEND }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_FRONTEND }}:${{ github.sha }}
          flags: '--allow-unauthenticated --memory=512Mi --cpu=1'
          env_vars: |
            NEXT_PUBLIC_BACKEND_HOST=${{ steps.deploy-backend.outputs.url }}
            NEXT_PUBLIC_BACKEND_PORT=443
            NEXT_PUBLIC_FRONTEND_PORT=3000

      - name: Show deployment URLs
        run: |
          echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.url }}"
